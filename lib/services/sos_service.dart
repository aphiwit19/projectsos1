// lib/services/sos_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:geolocator/geolocator.dart';
import 'package:intl/intl.dart';
import '../models/sos_log_model.dart';
import '../models/emergency_contact_model.dart';
import 'emergency_contact_service.dart';
import 'location_service.dart';
import 'profile_service.dart';
import 'sms_service.dart';
import '../models/user_profile_model.dart';
import 'firebase_service.dart';
import 'package:flutter/foundation.dart';
import '../services/sms_service.dart';
import '../services/location_service.dart';

class SosService {
  final FirebaseFirestore _firestore = FirebaseService.firestore;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final SmsService _smsService = SmsService();

  String _sanitizeName(String name) {
    return name
        .toLowerCase()
        .replaceAll(RegExp(r'[^\w\s]'), '')
        .replaceAll(RegExp(r'\s+'), '_');
  }

  Future<String?> _getEmailFromUserId(String userId) async {
    try {
      QuerySnapshot query = await _firestore
          .collection('Users')
          .where('uid', isEqualTo: userId)
          .limit(1)
          .get();
      if (query.docs.isEmpty) {
        debugPrint('User not found for userId: $userId');
        return null;
      }
      return query.docs.first.id;
    } catch (e) {
      debugPrint('Error getting email from userId: $e');
      return null;
    }
  }

  Future<Map<String, dynamic>> sendSos(
    String userId, {
    String detectionSource = 'manual',
  }) async {
    try {
      print('SOS Service: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SOS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ $userId (source: $detectionSource)');
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      final user = await _getUserData(userId);
      if (user == null) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        print('SOS Service: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô');
      }

      // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      print('SOS Service: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...');
      final position = await LocationService().getCurrentPosition();
      print('SOS Service: ‡πÑ‡∏î‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß - ${position.latitude}, ${position.longitude}');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      final positionLink = 'https://maps.google.com/?q=${position.latitude},${position.longitude}';
      
      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      print('SOS Service: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô...');
      final contacts = await _getEmergencyContacts(userId);
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      List<String> emergencyNumbers = [];
      if (contacts.isEmpty) {
        print('SOS Service: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô');
        emergencyNumbers = ['1669', '191', '199']; // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      } else {
        emergencyNumbers = contacts.map((contact) => contact['phone'] as String).toList();
      }
      
      print('SOS Service: ‡∏à‡∏∞‡∏™‡πà‡∏á SOS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${emergencyNumbers.length} ‡πÄ‡∏ö‡∏≠‡∏£‡πå');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SOS
      final message = '''
üö® SOS ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô üö®
‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏û SOS
‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: $positionLink
‡πÄ‡∏ß‡∏•‡∏≤: ${DateTime.now().toString()}
''';

      // ‡∏™‡πà‡∏á SMS
      print('SOS Service: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á SMS...');
      final smsResult = await _smsService.sendBulkSms(emergencyNumbers, message);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      final logId = await _saveSosHistory(
        userId,
        position,
        smsResult.successNumbers,
        smsResult.failedNumbers,
        detectionSource,
        smsResult,
      );
      
      return {
        'success': true,
        'message': '‡∏™‡πà‡∏á SOS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        'logId': logId,
        'sentTo': smsResult.successNumbers,
        'failedTo': smsResult.failedNumbers,
      };
    } catch (e) {
      print('SOS Service ERROR: $e');
      return {
        'success': false,
        'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SOS: ${e.toString()}',
      };
    }
  }

  Future<Map<String, dynamic>?> _getUserData(String userId) async {
    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å userId ‡πÅ‡∏•‡∏∞ uid
      QuerySnapshot usersQueryByUserId = await _firestore
          .collection('Users')
          .where('userId', isEqualTo: userId)
          .limit(1)
          .get();
      
      if (usersQueryByUserId.docs.isNotEmpty) {
        return usersQueryByUserId.docs.first.data() as Map<String, dynamic>;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å userId ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å uid
      QuerySnapshot usersQueryByUid = await _firestore
          .collection('Users')
          .where('uid', isEqualTo: userId)
          .limit(1)
          .get();
      
      if (usersQueryByUid.docs.isNotEmpty) {
        return usersQueryByUid.docs.first.data() as Map<String, dynamic>;
      }

      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å email ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ñ‡πâ‡∏≤ userId ‡πÄ‡∏õ‡πá‡∏ô email)
      DocumentSnapshot userDoc = await _firestore
          .collection('Users')
          .doc(userId)
          .get();
      
      if (userDoc.exists) {
        return userDoc.data() as Map<String, dynamic>;
      }
      
      print('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö userId: $userId');
      return null;
    } catch (e) {
      print('Error getting user data: $e');
      return null;
    }
  }

  Future<List<Map<String, dynamic>>> _getEmergencyContacts(String userId) async {
    try {
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
      
      // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ userId
      QuerySnapshot usersQueryByUserId = await _firestore
          .collection('Users')
          .where('userId', isEqualTo: userId)
          .limit(1)
          .get();
      
      if (usersQueryByUserId.docs.isNotEmpty) {
        final userDoc = usersQueryByUserId.docs.first;
        
        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Firestore
        final contactsSnapshot = await _firestore
            .collection('Users')
            .doc(userDoc.id)
            .collection('EmergencyContacts')
            .get();
        
        return contactsSnapshot.docs
            .map((doc) => doc.data() as Map<String, dynamic>)
            .toList();
      }
      
      // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ uid
      QuerySnapshot usersQueryByUid = await _firestore
          .collection('Users')
          .where('uid', isEqualTo: userId)
          .limit(1)
          .get();
      
      if (usersQueryByUid.docs.isNotEmpty) {
        final userDoc = usersQueryByUid.docs.first;
        
        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Firestore
        final contactsSnapshot = await _firestore
            .collection('Users')
            .doc(userDoc.id)
            .collection('EmergencyContacts')
            .get();
        
        return contactsSnapshot.docs
            .map((doc) => doc.data() as Map<String, dynamic>)
            .toList();
      }
      
      // 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å document ID (‡∏ñ‡πâ‡∏≤ userId ‡πÄ‡∏õ‡πá‡∏ô email)
      try {
        final contactsSnapshot = await _firestore
            .collection('Users')
            .doc(userId)
            .collection('EmergencyContacts')
            .get();
        
        return contactsSnapshot.docs
            .map((doc) => doc.data() as Map<String, dynamic>)
            .toList();
      } catch (e) {
        print('Error getting emergency contacts directly: $e');
      }
      
      print('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö userId: $userId');
      return [];
    } catch (e) {
      print('Error getting emergency contacts: $e');
      return [];
    }
  }

  Future<String> _saveSosHistory(
    String userId,
    Position position,
    List<String> sentNumbers,
    List<String> failedNumbers,
    String detectionSource,
    SmsResult smsResult,
  ) async {
    try {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (sentNumbers.isEmpty) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏á SMS ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return "not_saved_${DateTime.now().millisecondsSinceEpoch}";
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SOS
      final sosData = {
        'userId': userId,
        'timestamp': FieldValue.serverTimestamp(),
        'location': {
          'latitude': position.latitude,
          'longitude': position.longitude,
          'accuracy': position.accuracy,
        },
        'sentTo': sentNumbers,
        'failedTo': failedNumbers,
        'status': 'success', // ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÄ‡∏ö‡∏≠‡∏£‡πå
        'detectionSource': detectionSource,
        'mapLink': 'https://maps.google.com/?q=${position.latitude},${position.longitude}',
        'message': 'SOS ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${DateFormat('dd/MM/yyyy HH:mm').format(DateTime.now())}',
        'recipients': sentNumbers,
        'userInfo': {
          'userId': userId,
        },
        'smsGatewayResult': {
          'allSuccess': smsResult.allSuccess,
          'errorMessage': smsResult.errorMessage,
          'statuses': smsResult.statuses.map((phone, status) => MapEntry(phone, statusToString(status))),
        },
      };
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
      final docRef = await _firestore.collection('sos_logs').add(sosData);

      try {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ document ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (email)
        String? email = await _getEmailFromUserId(userId);
        
        if (email != null) {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á user document ‡∏î‡πâ‡∏ß‡∏¢ email ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô sos_logs ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
          await _firestore.collection('Users').doc(email).collection('sos_logs').doc(docRef.id).set(sosData);
          print('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SOS ‡πÉ‡∏ô Users/$email/sos_logs ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        } else {
          // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏î‡πâ‡∏ß‡∏¢ userId ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô sos_logs ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
          await _firestore.collection('Users').doc(userId).collection('sos_logs').doc(docRef.id).set(sosData);
          print('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SOS ‡πÉ‡∏ô Users/$userId/sos_logs ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        }
      } catch (e) {
        print('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SOS ‡πÉ‡∏ô Users collection: $e');
        // ‡πÑ‡∏°‡πà throw exception ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á user document
      }
      
      return docRef.id;
    } catch (e) {
      print('Error saving SOS history: $e');
      rethrow; // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ error
    }
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á SmsStatus ‡πÄ‡∏õ‡πá‡∏ô String
  String statusToString(SmsStatus status) {
    switch (status) {
      case SmsStatus.success:
        return 'success';
      case SmsStatus.failed:
        return 'failed';
      case SmsStatus.pending:
        return 'pending';
      case SmsStatus.noCredit:
        return 'no_credit';
      default:
        return 'unknown';
    }
  }

  Future<List<SosLog>> getSosLogs(String userId) async {
    try {
      final email = await _getEmailFromUserId(userId);
      if (email == null) {
        return [];
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô sos_logs ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      QuerySnapshot logsSnapshot = await _firestore
          .collection('Users')
          .doc(email)
          .collection('sos_logs')
          .orderBy('timestamp', descending: true)
          .get();

      if (logsSnapshot.docs.isEmpty) {
        print('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SOS ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô sos_logs');
        return [];
      }
      
      print('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SOS ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${logsSnapshot.docs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô sos_logs');
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô SosLog
      List<SosLog> allLogs = logsSnapshot.docs
          .map((doc) => SosLog.fromJson(doc.data() as Map<String, dynamic>, doc.id))
          .toList();
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á SMS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏°‡∏î
      allLogs = allLogs.where((log) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô UI event ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        if (log.extraData.containsKey('action')) {
          String action = log.extraData['action'].toString();
          if (action == 'sos_confirmation_opened' ||
              action.startsWith('ui_') ||
              action.contains('_screen')) {
            return false;
          }
        }
      
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏°‡∏î
        if (log.id.startsWith('not_saved_')) {
          return false;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SMS Gateway
        if (log.extraData.containsKey('smsGatewayResult')) {
          var smsResult = log.extraData['smsGatewayResult'];
          if (smsResult is Map) {
            if (smsResult.containsKey('allSuccess') && smsResult['allSuccess'] == false) {
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏°‡∏î
              if (smsResult.containsKey('errorMessage') && 
                  smsResult['errorMessage'] is String && 
                  smsResult['errorMessage'].toString().toLowerCase().contains('credit')) {
                return false;
              }
              
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ö‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              if (smsResult.containsKey('statuses') && 
                  smsResult['statuses'] is Map &&
                  !smsResult['statuses'].values.any((status) => status == 'success')) {
                return false;
              }
            }
          }
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå sentTo ‡∏´‡∏£‡∏∑‡∏≠ recipients
        bool hasSentNumbers = false;
        
        if (log.extraData.containsKey('sentTo') && log.extraData['sentTo'] is List) {
          hasSentNumbers = (log.extraData['sentTo'] as List).isNotEmpty;
        }
        
        if (!hasSentNumbers && log.recipients.isNotEmpty) {
          hasSentNumbers = true;
        }
        
        if (!hasSentNumbers) {
          return false;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if (log.extraData.containsKey('status')) {
          String status = log.extraData['status'].toString();
          if (status != 'success' && status != 'sent') {
            return false;
          }
        }
        
        return true;
      }).toList();
      
      print('‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SOS ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${allLogs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      return allLogs;
    } on Exception catch (e) {
      debugPrint('Error loading SOS logs: $e');
      return [];
    }
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏
  Future<bool> deleteSosLog(String userId, String sosLogId) async {
    try {
      final email = await _getEmailFromUserId(userId);
      if (email == null) {
        debugPrint('Cannot delete SOS log: User email not found for userId: $userId');
        return false;
      }

      bool success = false;

      try {
        // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô sos_logs (‡∏´‡∏•‡∏±‡∏Å) ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        await _firestore
            .collection('Users')
            .doc(email)
            .collection('sos_logs')
            .doc(sosLogId)
            .delete();
        
        debugPrint('SOS log deleted successfully from sos_logs: $sosLogId');
        success = true;
      } catch (e) {
        debugPrint('Error or not found when deleting from sos_logs: $e');
      }
      
      // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á sos_logs ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      try {
        await _firestore
            .collection('sos_logs')
            .doc(sosLogId)
            .delete();
            
        debugPrint('SOS log deleted successfully from global sos_logs: $sosLogId');
        success = true;
      } catch (e) {
        debugPrint('Error or not found when deleting from global sos_logs: $e');
      }
      
      return success;
    } on Exception catch (e) {
      debugPrint('Error deleting SOS log: $e');
      return false;
    }
  }
}